import telebot
from peewee import *        # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã –∏–∑ peewee
from telebot import types   # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
db = SqliteDatabase('database.db')


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å "–ø–æ—Å—Ç" –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
class Post(Model):
    post_id = IntegerField()
    username = CharField()
    text = CharField()
    likes = IntegerField()

    # —Å–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å Post —Å –ë–î
    class Meta:
        database = db


# —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ (–µ—Å–ª–∏ –µ–µ –Ω–µ—Ç)
db.create_tables([Post])


# –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
bot = telebot.TeleBot('5872856683:AAE-gcdryoBHk0fONGyycZtC7jI-FrgjiGk')


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button_1 = types.KeyboardButton('‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç')
    button_2 = types.KeyboardButton('üì± –õ–µ–Ω—Ç–∞')
    button_3 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç')
    button_4 = types.KeyboardButton('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
    markup.add(button_1, button_2, button_3, button_4)
    bot.reply_to(message, "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç')
def handle_add(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ‚Ññ –ø–æ—Å—Ç–∞, –Ω–∏–∫, —Ç–µ–∫—Å—Ç, –ª–∞–π–∫–∏")
    bot.register_next_step_handler(msg, process_add_step)


def process_add_step(message):
    chat_id = message.chat.id
    data = message.text.split(', ')
    if len(data) == 4:
        try:
            # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î
            Post.create(post_id=int(data[0]), username=data[1], text=data[2], likes=data[3])
            bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")


@bot.message_handler(func=lambda message: message.text == 'üì± –õ–µ–Ω—Ç–∞')
def handle_list(message):
    chat_id = message.chat.id
    rows = Post.select()
    data = ''
    for row in rows:
        data += f"‚Ññ –ø–æ—Å—Ç–∞: {row.post_id}\n–ù–∏–∫: {row.username}\n–¢–µ–∫—Å—Ç: {row.text}\n–õ–∞–π–∫–∏: {row.likes}\n\n"
    if data:
        bot.send_message(chat_id, data)
    else:
        bot.send_message(chat_id, "–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç")


@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç')
def handle_delete(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_delete_step)


def process_delete_step(message):
    chat_id = message.chat.id
    number = message.text
    try:
        # –ï—Å—Ç—å –ª–∏ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID?
        post = Post.get(Post.post_id == number)
        post.delete_instance()
        bot.send_message(chat_id, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω")
    except Post.DoesNotExist:
        bot.send_message(chat_id, "–ü–æ—Å—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")


@bot.message_handler(func=lambda message: message.text == '‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
def handle_edit(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
    bot.register_next_step_handler(msg, process_edit_step)


def process_edit_step(message):
    chat_id = message.chat.id
    number = message.text
    try:
        # –ï—Å—Ç—å –ª–∏ –ø–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID?
        post = Post.get(Post.post_id == number)
        msg = bot.send_message(chat_id, "–í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∏—Å—å:\n"
                                        f"‚Ññ –ø–æ—Å—Ç–∞: {post.post_id}\n"
                                        f"–ù–∏–∫: {post.username}\n"
                                        f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post.text}\n"
                                        f"–õ–∞–π–∫–∏: {post.likes}\n\n"
                                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∏–∫, —Ç–µ–∫—Å—Ç, –ª–∞–π–∫–∏")
        bot.register_next_step_handler(msg, lambda msg: process_update_step(msg, post))
    except Post.DoesNotExist:
        bot.send_message(chat_id, "–ó–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")


def process_update_step(message, post):
    chat_id = message.chat.id
    data = message.text.split(', ')
    if len(data) == 3:
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            post.username = data[0]
            post.text = data[1]
            post.likes = data[2]
            post.save()
            bot.send_message(chat_id, "–ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")


# –ó–∞–ø—É—Å–∫
bot.polling()
